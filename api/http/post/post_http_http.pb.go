// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.0
// source: http/post/post_http.proto

package post

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPostCreatePost = "/http.post.Post/CreatePost"

type PostHTTPServer interface {
	// CreatePost 创建帖子
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostReply, error)
}

func RegisterPostHTTPServer(s *http.Server, srv PostHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/post/createpost", _Post_CreatePost0_HTTP_Handler(srv))
}

func _Post_CreatePost0_HTTP_Handler(srv PostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPostCreatePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePost(ctx, req.(*CreatePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePostReply)
		return ctx.Result(200, reply)
	}
}

type PostHTTPClient interface {
	CreatePost(ctx context.Context, req *CreatePostRequest, opts ...http.CallOption) (rsp *CreatePostReply, err error)
}

type PostHTTPClientImpl struct {
	cc *http.Client
}

func NewPostHTTPClient(client *http.Client) PostHTTPClient {
	return &PostHTTPClientImpl{client}
}

func (c *PostHTTPClientImpl) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...http.CallOption) (*CreatePostReply, error) {
	var out CreatePostReply
	pattern := "/v1/post/createpost"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPostCreatePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
