// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.0
// source: http/app/app_http.proto

package app

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppCreatApp = "/http.app.App/CreatApp"
const OperationAppGetAppById = "/http.app.App/GetAppById"
const OperationAppListAppPage = "/http.app.App/ListAppPage"
const OperationAppModifyApp = "/http.app.App/ModifyApp"

type AppHTTPServer interface {
	CreatApp(context.Context, *CreatAppRequest) (*CreatAppReply, error)
	GetAppById(context.Context, *GetAppByIdRequest) (*GetAppByIdReply, error)
	// ListAppPage 获取应用列表分页
	ListAppPage(context.Context, *ListAppPageRequest) (*ListAppPageReply, error)
	ModifyApp(context.Context, *ModifyAppRequest) (*ModifyAppReply, error)
}

func RegisterAppHTTPServer(s *http.Server, srv AppHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/app/creatapp", _App_CreatApp0_HTTP_Handler(srv))
	r.POST("/v1/app/modifyapp", _App_ModifyApp0_HTTP_Handler(srv))
	r.POST("/v1/app/getappbyid", _App_GetAppById0_HTTP_Handler(srv))
	r.POST("/v1/app/listapppage", _App_ListAppPage0_HTTP_Handler(srv))
}

func _App_CreatApp0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppCreatApp)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatApp(ctx, req.(*CreatAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatAppReply)
		return ctx.Result(200, reply)
	}
}

func _App_ModifyApp0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModifyAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppModifyApp)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModifyApp(ctx, req.(*ModifyAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModifyAppReply)
		return ctx.Result(200, reply)
	}
}

func _App_GetAppById0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAppByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppGetAppById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAppById(ctx, req.(*GetAppByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAppByIdReply)
		return ctx.Result(200, reply)
	}
}

func _App_ListAppPage0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAppPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppListAppPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAppPage(ctx, req.(*ListAppPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAppPageReply)
		return ctx.Result(200, reply)
	}
}

type AppHTTPClient interface {
	CreatApp(ctx context.Context, req *CreatAppRequest, opts ...http.CallOption) (rsp *CreatAppReply, err error)
	GetAppById(ctx context.Context, req *GetAppByIdRequest, opts ...http.CallOption) (rsp *GetAppByIdReply, err error)
	ListAppPage(ctx context.Context, req *ListAppPageRequest, opts ...http.CallOption) (rsp *ListAppPageReply, err error)
	ModifyApp(ctx context.Context, req *ModifyAppRequest, opts ...http.CallOption) (rsp *ModifyAppReply, err error)
}

type AppHTTPClientImpl struct {
	cc *http.Client
}

func NewAppHTTPClient(client *http.Client) AppHTTPClient {
	return &AppHTTPClientImpl{client}
}

func (c *AppHTTPClientImpl) CreatApp(ctx context.Context, in *CreatAppRequest, opts ...http.CallOption) (*CreatAppReply, error) {
	var out CreatAppReply
	pattern := "/v1/app/creatapp"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppCreatApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) GetAppById(ctx context.Context, in *GetAppByIdRequest, opts ...http.CallOption) (*GetAppByIdReply, error) {
	var out GetAppByIdReply
	pattern := "/v1/app/getappbyid"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppGetAppById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) ListAppPage(ctx context.Context, in *ListAppPageRequest, opts ...http.CallOption) (*ListAppPageReply, error) {
	var out ListAppPageReply
	pattern := "/v1/app/listapppage"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppListAppPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) ModifyApp(ctx context.Context, in *ModifyAppRequest, opts ...http.CallOption) (*ModifyAppReply, error) {
	var out ModifyAppReply
	pattern := "/v1/app/modifyapp"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppModifyApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
