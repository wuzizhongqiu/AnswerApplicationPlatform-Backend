// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wuzigoweb/internal/data/model"
)

func newUserAnswer(db *gorm.DB, opts ...gen.DOOption) userAnswer {
	_userAnswer := userAnswer{}

	_userAnswer.userAnswerDo.UseDB(db, opts...)
	_userAnswer.userAnswerDo.UseModel(&model.UserAnswer{})

	tableName := _userAnswer.userAnswerDo.TableName()
	_userAnswer.ALL = field.NewAsterisk(tableName)
	_userAnswer.ID = field.NewInt64(tableName, "id")
	_userAnswer.AppID = field.NewInt64(tableName, "app_id")
	_userAnswer.AppType = field.NewInt32(tableName, "app_type")
	_userAnswer.ScoringStrategy = field.NewInt32(tableName, "scoring_strategy")
	_userAnswer.Choices = field.NewString(tableName, "choices")
	_userAnswer.ResultID = field.NewInt64(tableName, "result_id")
	_userAnswer.ResultName = field.NewString(tableName, "result_name")
	_userAnswer.ResultDesc = field.NewString(tableName, "result_desc")
	_userAnswer.ResultPicture = field.NewString(tableName, "result_picture")
	_userAnswer.ResultScore = field.NewInt32(tableName, "result_score")
	_userAnswer.UserID = field.NewInt64(tableName, "user_id")
	_userAnswer.CreateTime = field.NewTime(tableName, "create_time")
	_userAnswer.UpdateTime = field.NewTime(tableName, "update_time")
	_userAnswer.DeleteAt = field.NewInt32(tableName, "delete_at")

	_userAnswer.fillFieldMap()

	return _userAnswer
}

// userAnswer 用户答题记录
type userAnswer struct {
	userAnswerDo userAnswerDo

	ALL             field.Asterisk
	ID              field.Int64
	AppID           field.Int64  // 应用 id
	AppType         field.Int32  // 应用类型（0-得分类，1-角色测评类）
	ScoringStrategy field.Int32  // 评分策略（0-自定义，1-AI）
	Choices         field.String // 用户答案（JSON 数组）
	ResultID        field.Int64  // 评分结果 id
	ResultName      field.String // 结果名称，如物流师
	ResultDesc      field.String // 结果描述
	ResultPicture   field.String // 结果图标
	ResultScore     field.Int32  // 得分
	UserID          field.Int64  // 用户 id
	CreateTime      field.Time   // 创建时间
	UpdateTime      field.Time   // 更新时间
	DeleteAt        field.Int32  // 是否删除

	fieldMap map[string]field.Expr
}

func (u userAnswer) Table(newTableName string) *userAnswer {
	u.userAnswerDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAnswer) As(alias string) *userAnswer {
	u.userAnswerDo.DO = *(u.userAnswerDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAnswer) updateTableName(table string) *userAnswer {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.AppID = field.NewInt64(table, "app_id")
	u.AppType = field.NewInt32(table, "app_type")
	u.ScoringStrategy = field.NewInt32(table, "scoring_strategy")
	u.Choices = field.NewString(table, "choices")
	u.ResultID = field.NewInt64(table, "result_id")
	u.ResultName = field.NewString(table, "result_name")
	u.ResultDesc = field.NewString(table, "result_desc")
	u.ResultPicture = field.NewString(table, "result_picture")
	u.ResultScore = field.NewInt32(table, "result_score")
	u.UserID = field.NewInt64(table, "user_id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")
	u.DeleteAt = field.NewInt32(table, "delete_at")

	u.fillFieldMap()

	return u
}

func (u *userAnswer) WithContext(ctx context.Context) IUserAnswerDo {
	return u.userAnswerDo.WithContext(ctx)
}

func (u userAnswer) TableName() string { return u.userAnswerDo.TableName() }

func (u userAnswer) Alias() string { return u.userAnswerDo.Alias() }

func (u userAnswer) Columns(cols ...field.Expr) gen.Columns { return u.userAnswerDo.Columns(cols...) }

func (u *userAnswer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAnswer) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["app_id"] = u.AppID
	u.fieldMap["app_type"] = u.AppType
	u.fieldMap["scoring_strategy"] = u.ScoringStrategy
	u.fieldMap["choices"] = u.Choices
	u.fieldMap["result_id"] = u.ResultID
	u.fieldMap["result_name"] = u.ResultName
	u.fieldMap["result_desc"] = u.ResultDesc
	u.fieldMap["result_picture"] = u.ResultPicture
	u.fieldMap["result_score"] = u.ResultScore
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
	u.fieldMap["delete_at"] = u.DeleteAt
}

func (u userAnswer) clone(db *gorm.DB) userAnswer {
	u.userAnswerDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAnswer) replaceDB(db *gorm.DB) userAnswer {
	u.userAnswerDo.ReplaceDB(db)
	return u
}

type userAnswerDo struct{ gen.DO }

type IUserAnswerDo interface {
	gen.SubQuery
	Debug() IUserAnswerDo
	WithContext(ctx context.Context) IUserAnswerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserAnswerDo
	WriteDB() IUserAnswerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserAnswerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserAnswerDo
	Not(conds ...gen.Condition) IUserAnswerDo
	Or(conds ...gen.Condition) IUserAnswerDo
	Select(conds ...field.Expr) IUserAnswerDo
	Where(conds ...gen.Condition) IUserAnswerDo
	Order(conds ...field.Expr) IUserAnswerDo
	Distinct(cols ...field.Expr) IUserAnswerDo
	Omit(cols ...field.Expr) IUserAnswerDo
	Join(table schema.Tabler, on ...field.Expr) IUserAnswerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserAnswerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserAnswerDo
	Group(cols ...field.Expr) IUserAnswerDo
	Having(conds ...gen.Condition) IUserAnswerDo
	Limit(limit int) IUserAnswerDo
	Offset(offset int) IUserAnswerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAnswerDo
	Unscoped() IUserAnswerDo
	Create(values ...*model.UserAnswer) error
	CreateInBatches(values []*model.UserAnswer, batchSize int) error
	Save(values ...*model.UserAnswer) error
	First() (*model.UserAnswer, error)
	Take() (*model.UserAnswer, error)
	Last() (*model.UserAnswer, error)
	Find() ([]*model.UserAnswer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAnswer, err error)
	FindInBatches(result *[]*model.UserAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserAnswer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserAnswerDo
	Assign(attrs ...field.AssignExpr) IUserAnswerDo
	Joins(fields ...field.RelationField) IUserAnswerDo
	Preload(fields ...field.RelationField) IUserAnswerDo
	FirstOrInit() (*model.UserAnswer, error)
	FirstOrCreate() (*model.UserAnswer, error)
	FindByPage(offset int, limit int) (result []*model.UserAnswer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserAnswerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userAnswerDo) Debug() IUserAnswerDo {
	return u.withDO(u.DO.Debug())
}

func (u userAnswerDo) WithContext(ctx context.Context) IUserAnswerDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAnswerDo) ReadDB() IUserAnswerDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAnswerDo) WriteDB() IUserAnswerDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAnswerDo) Session(config *gorm.Session) IUserAnswerDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAnswerDo) Clauses(conds ...clause.Expression) IUserAnswerDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAnswerDo) Returning(value interface{}, columns ...string) IUserAnswerDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAnswerDo) Not(conds ...gen.Condition) IUserAnswerDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAnswerDo) Or(conds ...gen.Condition) IUserAnswerDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAnswerDo) Select(conds ...field.Expr) IUserAnswerDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAnswerDo) Where(conds ...gen.Condition) IUserAnswerDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAnswerDo) Order(conds ...field.Expr) IUserAnswerDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAnswerDo) Distinct(cols ...field.Expr) IUserAnswerDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAnswerDo) Omit(cols ...field.Expr) IUserAnswerDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAnswerDo) Join(table schema.Tabler, on ...field.Expr) IUserAnswerDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAnswerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserAnswerDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAnswerDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserAnswerDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAnswerDo) Group(cols ...field.Expr) IUserAnswerDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAnswerDo) Having(conds ...gen.Condition) IUserAnswerDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAnswerDo) Limit(limit int) IUserAnswerDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAnswerDo) Offset(offset int) IUserAnswerDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAnswerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAnswerDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAnswerDo) Unscoped() IUserAnswerDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAnswerDo) Create(values ...*model.UserAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAnswerDo) CreateInBatches(values []*model.UserAnswer, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAnswerDo) Save(values ...*model.UserAnswer) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAnswerDo) First() (*model.UserAnswer, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAnswer), nil
	}
}

func (u userAnswerDo) Take() (*model.UserAnswer, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAnswer), nil
	}
}

func (u userAnswerDo) Last() (*model.UserAnswer, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAnswer), nil
	}
}

func (u userAnswerDo) Find() ([]*model.UserAnswer, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAnswer), err
}

func (u userAnswerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAnswer, err error) {
	buf := make([]*model.UserAnswer, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAnswerDo) FindInBatches(result *[]*model.UserAnswer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAnswerDo) Attrs(attrs ...field.AssignExpr) IUserAnswerDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAnswerDo) Assign(attrs ...field.AssignExpr) IUserAnswerDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAnswerDo) Joins(fields ...field.RelationField) IUserAnswerDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAnswerDo) Preload(fields ...field.RelationField) IUserAnswerDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAnswerDo) FirstOrInit() (*model.UserAnswer, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAnswer), nil
	}
}

func (u userAnswerDo) FirstOrCreate() (*model.UserAnswer, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAnswer), nil
	}
}

func (u userAnswerDo) FindByPage(offset int, limit int) (result []*model.UserAnswer, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAnswerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAnswerDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAnswerDo) Delete(models ...*model.UserAnswer) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAnswerDo) withDO(do gen.Dao) *userAnswerDo {
	u.DO = *do.(*gen.DO)
	return u
}
