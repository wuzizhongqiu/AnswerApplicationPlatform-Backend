// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wuzigoweb/internal/data/model"
)

func newPostThumb(db *gorm.DB, opts ...gen.DOOption) postThumb {
	_postThumb := postThumb{}

	_postThumb.postThumbDo.UseDB(db, opts...)
	_postThumb.postThumbDo.UseModel(&model.PostThumb{})

	tableName := _postThumb.postThumbDo.TableName()
	_postThumb.ALL = field.NewAsterisk(tableName)
	_postThumb.ID = field.NewInt64(tableName, "id")
	_postThumb.CreateTime = field.NewTime(tableName, "create_time")
	_postThumb.UpdateTime = field.NewTime(tableName, "update_time")
	_postThumb.PostID = field.NewInt64(tableName, "post_id")
	_postThumb.UserID = field.NewInt64(tableName, "user_id")

	_postThumb.fillFieldMap()

	return _postThumb
}

// postThumb 帖子点赞
type postThumb struct {
	postThumbDo postThumbDo

	ALL        field.Asterisk
	ID         field.Int64 // id
	CreateTime field.Time  // 创建时间
	UpdateTime field.Time  // 更新时间
	PostID     field.Int64 // 帖子 id
	UserID     field.Int64 // 创建用户 id

	fieldMap map[string]field.Expr
}

func (p postThumb) Table(newTableName string) *postThumb {
	p.postThumbDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p postThumb) As(alias string) *postThumb {
	p.postThumbDo.DO = *(p.postThumbDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *postThumb) updateTableName(table string) *postThumb {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.PostID = field.NewInt64(table, "post_id")
	p.UserID = field.NewInt64(table, "user_id")

	p.fillFieldMap()

	return p
}

func (p *postThumb) WithContext(ctx context.Context) IPostThumbDo {
	return p.postThumbDo.WithContext(ctx)
}

func (p postThumb) TableName() string { return p.postThumbDo.TableName() }

func (p postThumb) Alias() string { return p.postThumbDo.Alias() }

func (p postThumb) Columns(cols ...field.Expr) gen.Columns { return p.postThumbDo.Columns(cols...) }

func (p *postThumb) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *postThumb) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["post_id"] = p.PostID
	p.fieldMap["user_id"] = p.UserID
}

func (p postThumb) clone(db *gorm.DB) postThumb {
	p.postThumbDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p postThumb) replaceDB(db *gorm.DB) postThumb {
	p.postThumbDo.ReplaceDB(db)
	return p
}

type postThumbDo struct{ gen.DO }

type IPostThumbDo interface {
	gen.SubQuery
	Debug() IPostThumbDo
	WithContext(ctx context.Context) IPostThumbDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPostThumbDo
	WriteDB() IPostThumbDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPostThumbDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPostThumbDo
	Not(conds ...gen.Condition) IPostThumbDo
	Or(conds ...gen.Condition) IPostThumbDo
	Select(conds ...field.Expr) IPostThumbDo
	Where(conds ...gen.Condition) IPostThumbDo
	Order(conds ...field.Expr) IPostThumbDo
	Distinct(cols ...field.Expr) IPostThumbDo
	Omit(cols ...field.Expr) IPostThumbDo
	Join(table schema.Tabler, on ...field.Expr) IPostThumbDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPostThumbDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPostThumbDo
	Group(cols ...field.Expr) IPostThumbDo
	Having(conds ...gen.Condition) IPostThumbDo
	Limit(limit int) IPostThumbDo
	Offset(offset int) IPostThumbDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPostThumbDo
	Unscoped() IPostThumbDo
	Create(values ...*model.PostThumb) error
	CreateInBatches(values []*model.PostThumb, batchSize int) error
	Save(values ...*model.PostThumb) error
	First() (*model.PostThumb, error)
	Take() (*model.PostThumb, error)
	Last() (*model.PostThumb, error)
	Find() ([]*model.PostThumb, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PostThumb, err error)
	FindInBatches(result *[]*model.PostThumb, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PostThumb) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPostThumbDo
	Assign(attrs ...field.AssignExpr) IPostThumbDo
	Joins(fields ...field.RelationField) IPostThumbDo
	Preload(fields ...field.RelationField) IPostThumbDo
	FirstOrInit() (*model.PostThumb, error)
	FirstOrCreate() (*model.PostThumb, error)
	FindByPage(offset int, limit int) (result []*model.PostThumb, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPostThumbDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p postThumbDo) Debug() IPostThumbDo {
	return p.withDO(p.DO.Debug())
}

func (p postThumbDo) WithContext(ctx context.Context) IPostThumbDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p postThumbDo) ReadDB() IPostThumbDo {
	return p.Clauses(dbresolver.Read)
}

func (p postThumbDo) WriteDB() IPostThumbDo {
	return p.Clauses(dbresolver.Write)
}

func (p postThumbDo) Session(config *gorm.Session) IPostThumbDo {
	return p.withDO(p.DO.Session(config))
}

func (p postThumbDo) Clauses(conds ...clause.Expression) IPostThumbDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p postThumbDo) Returning(value interface{}, columns ...string) IPostThumbDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p postThumbDo) Not(conds ...gen.Condition) IPostThumbDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p postThumbDo) Or(conds ...gen.Condition) IPostThumbDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p postThumbDo) Select(conds ...field.Expr) IPostThumbDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p postThumbDo) Where(conds ...gen.Condition) IPostThumbDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p postThumbDo) Order(conds ...field.Expr) IPostThumbDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p postThumbDo) Distinct(cols ...field.Expr) IPostThumbDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p postThumbDo) Omit(cols ...field.Expr) IPostThumbDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p postThumbDo) Join(table schema.Tabler, on ...field.Expr) IPostThumbDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p postThumbDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPostThumbDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p postThumbDo) RightJoin(table schema.Tabler, on ...field.Expr) IPostThumbDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p postThumbDo) Group(cols ...field.Expr) IPostThumbDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p postThumbDo) Having(conds ...gen.Condition) IPostThumbDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p postThumbDo) Limit(limit int) IPostThumbDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p postThumbDo) Offset(offset int) IPostThumbDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p postThumbDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPostThumbDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p postThumbDo) Unscoped() IPostThumbDo {
	return p.withDO(p.DO.Unscoped())
}

func (p postThumbDo) Create(values ...*model.PostThumb) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p postThumbDo) CreateInBatches(values []*model.PostThumb, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p postThumbDo) Save(values ...*model.PostThumb) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p postThumbDo) First() (*model.PostThumb, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostThumb), nil
	}
}

func (p postThumbDo) Take() (*model.PostThumb, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostThumb), nil
	}
}

func (p postThumbDo) Last() (*model.PostThumb, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostThumb), nil
	}
}

func (p postThumbDo) Find() ([]*model.PostThumb, error) {
	result, err := p.DO.Find()
	return result.([]*model.PostThumb), err
}

func (p postThumbDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PostThumb, err error) {
	buf := make([]*model.PostThumb, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p postThumbDo) FindInBatches(result *[]*model.PostThumb, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p postThumbDo) Attrs(attrs ...field.AssignExpr) IPostThumbDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p postThumbDo) Assign(attrs ...field.AssignExpr) IPostThumbDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p postThumbDo) Joins(fields ...field.RelationField) IPostThumbDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p postThumbDo) Preload(fields ...field.RelationField) IPostThumbDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p postThumbDo) FirstOrInit() (*model.PostThumb, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostThumb), nil
	}
}

func (p postThumbDo) FirstOrCreate() (*model.PostThumb, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostThumb), nil
	}
}

func (p postThumbDo) FindByPage(offset int, limit int) (result []*model.PostThumb, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p postThumbDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p postThumbDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p postThumbDo) Delete(models ...*model.PostThumb) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *postThumbDo) withDO(do gen.Dao) *postThumbDo {
	p.DO = *do.(*gen.DO)
	return p
}
