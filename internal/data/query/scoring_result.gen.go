// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"wuzigoweb/internal/data/model"
)

func newScoringResult(db *gorm.DB, opts ...gen.DOOption) scoringResult {
	_scoringResult := scoringResult{}

	_scoringResult.scoringResultDo.UseDB(db, opts...)
	_scoringResult.scoringResultDo.UseModel(&model.ScoringResult{})

	tableName := _scoringResult.scoringResultDo.TableName()
	_scoringResult.ALL = field.NewAsterisk(tableName)
	_scoringResult.ID = field.NewInt64(tableName, "id")
	_scoringResult.ResultName = field.NewString(tableName, "result_name")
	_scoringResult.ResultDesc = field.NewString(tableName, "result_desc")
	_scoringResult.ResultPicture = field.NewString(tableName, "result_picture")
	_scoringResult.ResultProp = field.NewString(tableName, "result_prop")
	_scoringResult.ResultScoreRange = field.NewInt32(tableName, "result_score_range")
	_scoringResult.AppID = field.NewInt64(tableName, "app_id")
	_scoringResult.UserID = field.NewInt64(tableName, "user_id")
	_scoringResult.CreateTime = field.NewTime(tableName, "create_time")
	_scoringResult.UpdateTime = field.NewTime(tableName, "update_time")
	_scoringResult.DeleteAt = field.NewInt32(tableName, "delete_at")

	_scoringResult.fillFieldMap()

	return _scoringResult
}

// scoringResult 评分结果
type scoringResult struct {
	scoringResultDo scoringResultDo

	ALL              field.Asterisk
	ID               field.Int64  // id
	ResultName       field.String // 结果名称，如物流师
	ResultDesc       field.String // 结果描述
	ResultPicture    field.String // 结果图片
	ResultProp       field.String // 结果属性集合 JSON，如 [I,S,T,J]
	ResultScoreRange field.Int32  // 结果得分范围，如 80，表示 80及以上的分数命中此结果
	AppID            field.Int64  // 应用 id
	UserID           field.Int64  // 创建用户 id
	CreateTime       field.Time   // 创建时间
	UpdateTime       field.Time   // 更新时间
	DeleteAt         field.Int32  // 是否删除

	fieldMap map[string]field.Expr
}

func (s scoringResult) Table(newTableName string) *scoringResult {
	s.scoringResultDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scoringResult) As(alias string) *scoringResult {
	s.scoringResultDo.DO = *(s.scoringResultDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scoringResult) updateTableName(table string) *scoringResult {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ResultName = field.NewString(table, "result_name")
	s.ResultDesc = field.NewString(table, "result_desc")
	s.ResultPicture = field.NewString(table, "result_picture")
	s.ResultProp = field.NewString(table, "result_prop")
	s.ResultScoreRange = field.NewInt32(table, "result_score_range")
	s.AppID = field.NewInt64(table, "app_id")
	s.UserID = field.NewInt64(table, "user_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.DeleteAt = field.NewInt32(table, "delete_at")

	s.fillFieldMap()

	return s
}

func (s *scoringResult) WithContext(ctx context.Context) IScoringResultDo {
	return s.scoringResultDo.WithContext(ctx)
}

func (s scoringResult) TableName() string { return s.scoringResultDo.TableName() }

func (s scoringResult) Alias() string { return s.scoringResultDo.Alias() }

func (s scoringResult) Columns(cols ...field.Expr) gen.Columns {
	return s.scoringResultDo.Columns(cols...)
}

func (s *scoringResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scoringResult) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["result_name"] = s.ResultName
	s.fieldMap["result_desc"] = s.ResultDesc
	s.fieldMap["result_picture"] = s.ResultPicture
	s.fieldMap["result_prop"] = s.ResultProp
	s.fieldMap["result_score_range"] = s.ResultScoreRange
	s.fieldMap["app_id"] = s.AppID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["delete_at"] = s.DeleteAt
}

func (s scoringResult) clone(db *gorm.DB) scoringResult {
	s.scoringResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scoringResult) replaceDB(db *gorm.DB) scoringResult {
	s.scoringResultDo.ReplaceDB(db)
	return s
}

type scoringResultDo struct{ gen.DO }

type IScoringResultDo interface {
	gen.SubQuery
	Debug() IScoringResultDo
	WithContext(ctx context.Context) IScoringResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScoringResultDo
	WriteDB() IScoringResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScoringResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScoringResultDo
	Not(conds ...gen.Condition) IScoringResultDo
	Or(conds ...gen.Condition) IScoringResultDo
	Select(conds ...field.Expr) IScoringResultDo
	Where(conds ...gen.Condition) IScoringResultDo
	Order(conds ...field.Expr) IScoringResultDo
	Distinct(cols ...field.Expr) IScoringResultDo
	Omit(cols ...field.Expr) IScoringResultDo
	Join(table schema.Tabler, on ...field.Expr) IScoringResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScoringResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScoringResultDo
	Group(cols ...field.Expr) IScoringResultDo
	Having(conds ...gen.Condition) IScoringResultDo
	Limit(limit int) IScoringResultDo
	Offset(offset int) IScoringResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScoringResultDo
	Unscoped() IScoringResultDo
	Create(values ...*model.ScoringResult) error
	CreateInBatches(values []*model.ScoringResult, batchSize int) error
	Save(values ...*model.ScoringResult) error
	First() (*model.ScoringResult, error)
	Take() (*model.ScoringResult, error)
	Last() (*model.ScoringResult, error)
	Find() ([]*model.ScoringResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScoringResult, err error)
	FindInBatches(result *[]*model.ScoringResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScoringResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScoringResultDo
	Assign(attrs ...field.AssignExpr) IScoringResultDo
	Joins(fields ...field.RelationField) IScoringResultDo
	Preload(fields ...field.RelationField) IScoringResultDo
	FirstOrInit() (*model.ScoringResult, error)
	FirstOrCreate() (*model.ScoringResult, error)
	FindByPage(offset int, limit int) (result []*model.ScoringResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScoringResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scoringResultDo) Debug() IScoringResultDo {
	return s.withDO(s.DO.Debug())
}

func (s scoringResultDo) WithContext(ctx context.Context) IScoringResultDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scoringResultDo) ReadDB() IScoringResultDo {
	return s.Clauses(dbresolver.Read)
}

func (s scoringResultDo) WriteDB() IScoringResultDo {
	return s.Clauses(dbresolver.Write)
}

func (s scoringResultDo) Session(config *gorm.Session) IScoringResultDo {
	return s.withDO(s.DO.Session(config))
}

func (s scoringResultDo) Clauses(conds ...clause.Expression) IScoringResultDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scoringResultDo) Returning(value interface{}, columns ...string) IScoringResultDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scoringResultDo) Not(conds ...gen.Condition) IScoringResultDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scoringResultDo) Or(conds ...gen.Condition) IScoringResultDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scoringResultDo) Select(conds ...field.Expr) IScoringResultDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scoringResultDo) Where(conds ...gen.Condition) IScoringResultDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scoringResultDo) Order(conds ...field.Expr) IScoringResultDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scoringResultDo) Distinct(cols ...field.Expr) IScoringResultDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scoringResultDo) Omit(cols ...field.Expr) IScoringResultDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scoringResultDo) Join(table schema.Tabler, on ...field.Expr) IScoringResultDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scoringResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScoringResultDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scoringResultDo) RightJoin(table schema.Tabler, on ...field.Expr) IScoringResultDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scoringResultDo) Group(cols ...field.Expr) IScoringResultDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scoringResultDo) Having(conds ...gen.Condition) IScoringResultDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scoringResultDo) Limit(limit int) IScoringResultDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scoringResultDo) Offset(offset int) IScoringResultDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scoringResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScoringResultDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scoringResultDo) Unscoped() IScoringResultDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scoringResultDo) Create(values ...*model.ScoringResult) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scoringResultDo) CreateInBatches(values []*model.ScoringResult, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scoringResultDo) Save(values ...*model.ScoringResult) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scoringResultDo) First() (*model.ScoringResult, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoringResult), nil
	}
}

func (s scoringResultDo) Take() (*model.ScoringResult, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoringResult), nil
	}
}

func (s scoringResultDo) Last() (*model.ScoringResult, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoringResult), nil
	}
}

func (s scoringResultDo) Find() ([]*model.ScoringResult, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScoringResult), err
}

func (s scoringResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScoringResult, err error) {
	buf := make([]*model.ScoringResult, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scoringResultDo) FindInBatches(result *[]*model.ScoringResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scoringResultDo) Attrs(attrs ...field.AssignExpr) IScoringResultDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scoringResultDo) Assign(attrs ...field.AssignExpr) IScoringResultDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scoringResultDo) Joins(fields ...field.RelationField) IScoringResultDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scoringResultDo) Preload(fields ...field.RelationField) IScoringResultDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scoringResultDo) FirstOrInit() (*model.ScoringResult, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoringResult), nil
	}
}

func (s scoringResultDo) FirstOrCreate() (*model.ScoringResult, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScoringResult), nil
	}
}

func (s scoringResultDo) FindByPage(offset int, limit int) (result []*model.ScoringResult, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scoringResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scoringResultDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scoringResultDo) Delete(models ...*model.ScoringResult) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scoringResultDo) withDO(do gen.Dao) *scoringResultDo {
	s.DO = *do.(*gen.DO)
	return s
}
