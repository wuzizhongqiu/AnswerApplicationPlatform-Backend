// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"wuzigoweb/internal/biz"
	"wuzigoweb/internal/conf"
	"wuzigoweb/internal/data"
	"wuzigoweb/internal/server"
	"wuzigoweb/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, micro *conf.Micro, logger log.Logger) (*kratos.App, func(), error) {
	db, err := data.NewDB(confData)
	if err != nil {
		return nil, nil, err
	}
	client, err := data.NewRedis(confData)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(db, logger, client)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	userService := service.NewUserService(userUsecase)
	postRepo := data.NewPostRepo(dataData, logger)
	postUsecase := biz.NewPostUsecase(postRepo, logger)
	postService := service.NewPostService(postUsecase)
	appRepo := data.NewAppRepo(dataData, logger)
	appUsecase := biz.NewAppUsecase(appRepo, logger)
	appService := service.NewAppService(appUsecase)
	questionRepo := data.NewQuestionRepo(dataData, logger)
	questionUsecase := biz.NewQuestionUsecase(questionRepo, logger)
	questionService := service.NewQuestionService(questionUsecase)
	httpServer := server.NewHTTPServer(confServer, userService, postService, appService, questionService, logger)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
